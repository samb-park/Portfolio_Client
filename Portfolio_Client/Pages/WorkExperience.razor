@if (WorkExperiences != null && WorkExperiences.Any())
{
    <div id="experience" class="my-36 @COLOR.TXT @COLOR.HEADERTEXT ">
        <Animate Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0.3)" Easing="Easings.EaseInOutBack" Once="true" Mirror="true">
            <h2 id="projectHeader" class="text-center ml-5 mb-5 font-bold text-2xl md:text-3xl">
                Experience
            </h2>
        </Animate>

        <div class="mt-8 px-8 grid gap-8 lg:grid-cols-2 lg:gap-x-5 lg:gap-y-12">
            @foreach (var work in WorkExperiences)
            {
                <Animate Animation="Animations.FadeDown" Duration="TimeSpan.FromSeconds(1)" Delay="TimeSpan.FromSeconds(0.3)" Easing="Easings.EaseInOutBack" Once="true" Mirror="true">
                    <div class="bg-gray-900 rounded-lg px-6 py-3 @COLOR.TXT @COLOR.HEADERTEXT transform hover:-translate-y-1">
                        <p class="text-sm text-gray-500">
                            <time datetime="2020-03-16">@work.StartDate.Value.ToString("yyyy") - @work.EndDate.Value.ToString("yyyy") </time>
                        </p>

                        <p class="text-xl font-semibold">
                            @work.Title
                        </p>
                        <p class="mt-3 text-base text-gray-500">
                            @work.Description
                        </p>
                    </div>
                </Animate>
            }

        </div>
    </div>
}
else
{
    <div class="h-screen bg-black flex justify-center items-center">
        <video height="250" width="250" src="images/S.PARK.mp4" autoplay />
    </div>
}


@code
{
    [CascadingParameter(Name = "ColorMode")]
    public ColorMode COLOR { get; set; }

    public List<WorkDTO> WorkExperiences { get; set; } = new List<WorkDTO>();

    protected async override Task OnInitializedAsync()
    {
        // WorkExperiences = await WorkService.GetAllWorks();
        InitItems();
        WorkExperiences = WorkExperiences.OrderByDescending(x=>x.StartDate).ThenByDescending(x=>x.EndDate).ToList();
    }

    private void InitItems()
    {
        WorkExperiences.Add(new WorkDTO()
        {
            Title = "Conestoga College",
            Description = "Computer Programming and Analysis",
            StartDate = new DateTime(2020,01,01),
            EndDate = new DateTime(2021,01,01)
        });
        WorkExperiences.Add(new WorkDTO()
        {
            Title = "Samsung Electronics",
            Description = "Develop smart devices such as Galaxy series",
            StartDate = new DateTime(2012,01,01),
            EndDate = new DateTime(2019,01,01)
        });
        WorkExperiences.Add(new WorkDTO()
        {
            Title = "Samsung Software Membership in South Korea",
            Description = "Android Controller as part of drone, " +
                          "Exploration robot",
            StartDate = new DateTime(2010,01,01),
            EndDate = new DateTime(2012,01,01)
        });
        WorkExperiences.Add(new WorkDTO()
        {
            Title = "Club Activities at Dankook University",
            Description = "Learned micro controllers and implemented small project such as clean-up robot, mouse and line tracer",
            StartDate = new DateTime(2005,01,01),
            EndDate = new DateTime(2012,01,01)
        });
        WorkExperiences.Add(new WorkDTO()
        {
            Title = "Dankook University in South Korea",
            Description = "Bachelor of Engineering in Electronic Engineering",
            StartDate = new DateTime(2005,01,01),
            EndDate = new DateTime(2012,01,01)
        });
    }
}